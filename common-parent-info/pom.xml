<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.7.RELEASE</version>
        <relativePath/>
    </parent>
    <groupId>br.tech.desiderati.common</groupId>
    <artifactId>common-parent-info</artifactId>
    <version>2.0.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <organization>
        <name>Felipe Desiderati</name>
        <url>https://www.linkedin.com/in/felipedesiderati/</url>
    </organization>

    <distributionManagement>
        <repository>
            <id>github</id>
            <name>GitHub Desiderati Commons Apache Maven Packages</name>
            <url>https://maven.pkg.github.com/desiderati/commons</url>
        </repository>
    </distributionManagement>

    <properties>
        <!-- Basic configuration. -->
        <maven.build.timestamp.format>yyyyMMddHHmm</maven.build.timestamp.format>
        <maven.version>3.6.0</maven.version>
        <java.version>11</java.version>

        <!--
            There is no need to use Javadoc in our projects.
            Anyway there is a bug when used together with jgitflow-maven-plugin.
        -->
        <maven.javadoc.skip>true</maven.javadoc.skip>

        <!-- GitHub -->
        <github.server-url>https://github.com/desiderati</github.server-url>

        <!--
            Can be defined by children POMs. The name of the main class.
            If not specified, the first compiled class found that contains
            a 'main' method will be used.
        -->
        <start-class />
    </properties>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <forceJavacCompilerUse>true</forceJavacCompilerUse>
                        <parameters>true</parameters>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>2.5.3</version>
                    <configuration>
                        <useReleaseProfile>false</useReleaseProfile>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.projectlombok</groupId>
                    <artifactId>lombok-maven-plugin</artifactId>
                    <version>1.18.6.0</version>
                    <executions>
                        <execution>
                            <id>delombok</id>
                            <phase>generate-sources</phase>
                            <goals>
                                <goal>delombok</goal>
                            </goals>
                            <configuration>
                                <addOutputDirectory>false</addOutputDirectory>
                                <sourceDirectory>src/main/java</sourceDirectory>
                            </configuration>
                        </execution>
                        <execution>
                            <id>test-delombok</id>
                            <phase>generate-test-sources</phase>
                            <goals>
                                <goal>testDelombok</goal>
                            </goals>
                            <configuration>
                                <addOutputDirectory>false</addOutputDirectory>
                                <sourceDirectory>src/test/java</sourceDirectory>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <!--
                Install the sources along with your artifact.
            -->
            <plugin>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--
                Provides goals to control certain environmental constraints
                such as Maven version, JDK version.
            -->
            <plugin>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>enforce-rules</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>${maven.version}</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>[${java.version},)</version>
                                </requireJavaVersion>
                                <bannedDependencies>
                                    <excludes>
                                        <exclude>commons-logging:*:*</exclude>
                                        <exclude>org.hibernate:hibernate-validator:*</exclude>
                                        <exclude>log4j:*</exclude>
                                    </excludes>
                                    <searchTransitive>true</searchTransitive>
                                </bannedDependencies>
                                <dependencyConvergence />
                            </rules>
                            <fail>true</fail>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--
                A Maven plugin to find and flag duplicate classes and
                resources on the java classpath.
                This ensures stability and reproducability of a maven build
                and will flag possible problems or conflicts with
                dependencies in a project.
            -->
            <plugin>
                <groupId>org.basepom.maven</groupId>
                <artifactId>duplicate-finder-maven-plugin</artifactId>
                <version>1.3.0</version>
                <executions>
                    <execution>
                        <id>verify-duplicated-resources</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <failBuildInCaseOfConflict>false</failBuildInCaseOfConflict>
                            <checkTestClasspath>false</checkTestClasspath>
                            <ignoredClassPatterns>
                                <ignoredClassPattern>io.swagger.client.ApiClient</ignoredClassPattern>
                                <ignoredClassPattern>io.swagger.client.ApiException</ignoredClassPattern>
                            </ignoredClassPatterns>
                            <ignoredResourcePatterns>
                                <ignoredResourcePattern>application.properties</ignoredResourcePattern>
                                <ignoredResourcePattern>banner.txt</ignoredResourcePattern>
                                <ignoredResourcePattern>changelog.txt</ignoredResourcePattern>
                                <ignoredResourcePattern>i18n/exceptions(.*).properties</ignoredResourcePattern>
                                <ignoredResourcePattern>jwt.properties</ignoredResourcePattern>
                            </ignoredResourcePatterns>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--
                Generates the effective POM as an XML for the current build,
                with the active profiles factored in.
            -->
            <plugin>
                <artifactId>maven-help-plugin</artifactId>
                <executions>
                    <execution>
                        <id>generate-effective-pom</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>effective-pom</goal>
                        </goals>
                        <configuration>
                            <output>${project.build.directory}/effective-pom/${project.artifactId}.xml</output>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--
                Attach additional artifacts (effective POM) to be installed and deployed.
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-effective-pom</id>
                        <phase>package</phase>
                        <goals>
                            <goal>attach-artifact</goal>
                        </goals>
                        <configuration>
                            <artifacts>
                                <artifact>
                                    <file>${project.build.directory}/effective-pom/${project.artifactId}.xml</file>
                                    <type>effective-pom</type>
                                </artifact>
                            </artifacts>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--
                JaCoCo is a free code coverage library for Java, which has been created
                by the EclEmma team based on the lessons learned from using and integration
                existing libraries for many years.
            -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.4</version>
                <executions>
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>default-report</id>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>